#pragma once

#include "config.h"

#include <cstdint>
#include <stdexcept>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include "common/exception.h"
#include "common/io_limits_config_loader.h"
#include "common/token_bucket.h"

class IoLimitsDatabase {
public:
	typedef std::string GroupId;

	LIZARDFS_CREATE_EXCEPTION_CLASS_MSG(InvalidGroupIdException, Exception,
			"invalid group id");

	// default constructor, all limits are zero
	IoLimitsDatabase() {}

	// set limits (as generated by IoLimitsConfigLoader)
	//
	// all limits in bytes per second
	void setLimits(SteadyTimePoint now, const IoLimitsConfigLoader::LimitsMap& limits,
			uint32_t accumulate_ms);

	// get a list of all groups
	std::vector<std::string> getGroups() const;

	// try to satisfy client's request to change limit in given I/O group, return assigned limit
	uint64_t request(SteadyTimePoint now, const GroupId& groupId, uint64_t bytes);

private:
	typedef std::map<GroupId, TokenBucket> Groups;
	Groups groups_;
};
